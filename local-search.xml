<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>并查集</title>
    <link href="/2022/04/30/%E5%B9%B6%E6%9F%A5%E9%9B%86/"/>
    <url>/2022/04/30/%E5%B9%B6%E6%9F%A5%E9%9B%86/</url>
    
    <content type="html"><![CDATA[<h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>并查集一一种非常优雅的数据结构，主要解决元素分组的问题，也可以解决最小生成树问题。它管理一系列不相交的元素，支持两种操作。</p><ul><li>合并（Union）：把两个不相交的集合合并为一个集合。</li><li>查询（Find）：查询两个元素是否在同一个集合。</li></ul><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><ol><li>首先每个元素的父亲都是自己。p[x] &#x3D; x;</li><li>判断两个元素x,y是否满足条件，若满足条件，则p[x] &#x3D; y; x的父亲设置为y。这样两个元素就合并成一个集合了。</li><li>查询细节：当判断两个元素时，如果可以找到共同的父亲，则说明他们是一个集合的。这个时候要不断调用p[x] &#x3D; find(p,p[x]);向上不断的去寻找。</li></ol><h3 id="伪代码"><a href="#伪代码" class="headerlink" title="伪代码"></a>伪代码</h3><ol><li>查询</li></ol><figure class="highlight java"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">find</span><span class="hljs-params">(<span class="hljs-type">int</span>[] p,<span class="hljs-type">int</span> x)</span>&#123;<br><span class="hljs-keyword">if</span>(p[x] == x)&#123;<br><span class="hljs-keyword">return</span> x;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br><span class="hljs-keyword">return</span> p[x] = find(p,p[x]);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="2"><li>合并</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">union</span><span class="hljs-params">(<span class="hljs-type">int</span> i,<span class="hljs-type">int</span> j,<span class="hljs-type">int</span>[] p)</span>&#123;<br>p[find[i]] = find[j];<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="举例并实现"><a href="#举例并实现" class="headerlink" title="举例并实现"></a>举例并实现</h3><h4 id="题目：朋友圈"><a href="#题目：朋友圈" class="headerlink" title="题目：朋友圈"></a>题目：朋友圈</h4><p>有 n 个城市，其中一些彼此相连，另一些没有相连。如果城市 a 与城市 b 直接相连，且城市 b 与城市 c 直接相连，那么城市 a 与城市 c 间接相连。</p><p>省份 是一组直接或间接相连的城市，组内不含其他没有相连的城市。</p><p>给你一个 n x n 的矩阵 isConnected ，其中 isConnected[i][j]&#x3D; 1 表示第 i 个城市和第 j 个城市直接相连，而 isConnected[i][j] &#x3D; 0 表示二者不直接相连。</p><p>返回矩阵中 省份 的数量。</p><h5 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">findCircleNum</span><span class="hljs-params">(<span class="hljs-type">int</span>[][] isConnected)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">len</span> <span class="hljs-operator">=</span> isConnected.length;<br>        <span class="hljs-type">int</span>[] p = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[len];<br>        <span class="hljs-comment">// 先定义每个人的父亲是自己。</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;len;i++)&#123;<br>            p[i] = i;<br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;len;i++)&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=i+<span class="hljs-number">1</span>;j&lt;len;j++)&#123;<br>                <span class="hljs-comment">// 如果连通的话，就将两个元素连接起来。连接的方式：其中一个人成为另外一个人的父亲。</span><br>                <span class="hljs-keyword">if</span>(isConnected[i][j] == <span class="hljs-number">1</span>)&#123;<br>                    union(p,i,j);<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;len;i++)&#123;<br>            <span class="hljs-keyword">if</span>(p[i] == i)<br>                count++;<br>        &#125;<br>        <span class="hljs-keyword">return</span> count;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">union</span><span class="hljs-params">(<span class="hljs-type">int</span>[] p,<span class="hljs-type">int</span> i,<span class="hljs-type">int</span> j)</span>&#123;<br>        <span class="hljs-comment">// 分别寻找自己的父亲，最上面的父亲。</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> find(p,i);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">y</span> <span class="hljs-operator">=</span> find(p,j);<br>        <span class="hljs-comment">// 如果不相等，就将设置为父子关系。</span><br>        <span class="hljs-keyword">if</span>(x != y)&#123;<br>            p[x] = y;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 采用递归的方式寻找最上面的父亲。</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">find</span><span class="hljs-params">(<span class="hljs-type">int</span>[] p,<span class="hljs-type">int</span> i)</span>&#123;<br>        <span class="hljs-comment">// 最终都会找到一个自己是自己的父亲的。</span><br>        <span class="hljs-keyword">if</span>(p[i] == i)&#123;<br>            <span class="hljs-keyword">return</span> i;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-comment">// 递归</span><br>            <span class="hljs-keyword">return</span> p[i] = find(p,p[i]);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>手撕代码</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux内核之系统调用</title>
    <link href="/2022/04/19/Linux%E5%86%85%E6%A0%B8%E4%B9%8B%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8/"/>
    <url>/2022/04/19/Linux%E5%86%85%E6%A0%B8%E4%B9%8B%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h3 id="Linux-系统调用"><a href="#Linux-系统调用" class="headerlink" title="Linux 系统调用"></a>Linux 系统调用</h3><h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>Linux系统想要保证内核的稳定性和安全性，需要分为用户态和内核态。</p><p>用户态实现一个功能，仅仅只是一个api，具体调用需要内核来实现。但是调用api的时候可能会出现问题，会导致内核不稳定以及不安全，所以需要在用户态和内核态中间加上一层系统调用（syscall）。</p><p>现在一个架构就比较清楚了。</p><p>最上层是用户态也就是应用程序，中间一层就是系统调用，最后一层就是内核态。</p><p>换句话说，就是为了保证内核的稳定和安全，将方法抽象成一个系统调用，通过系统调用来访问内核的方法。</p><h5 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h5><figure class="highlight c"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs c"><span class="hljs-built_in">printf</span>()[应用程序/用户态]  -----&gt; C语言库中的<span class="hljs-built_in">printf</span>() -----&gt; C库中的write() -----&gt; write()[系统调用] -----&gt; 内核态<br></code></pre></td></tr></table></figure><p>在上述说的三层结构中，可能还有存在应用程序调用库函数，那库函数其实也属于用户态。但是应用程序需要通过库函数来进行系统调用。</p><h4 id="用户态是如何进入到内核态的呢？"><a href="#用户态是如何进入到内核态的呢？" class="headerlink" title="用户态是如何进入到内核态的呢？"></a>用户态是如何进入到内核态的呢？</h4><p>答案肯定是通过系统调用，但是其中的细节呢。</p><p>通知内核的机制是<strong>软中断处理</strong>。也就是通过异常，将其陷入内核态。实际上内核来处理异常的就是系统调用，只不过是通过异常的方式。</p><p>ps：应该是异常问题都需要内核态进行处理，用户态是解决不了的，那这样就可以有一个进入内核态的入口。</p><p>用户态将访问的方法，参数，系统调用号都通过<strong>寄存器</strong>传给内核态。</p><h4 id="实现一个系统调用所需要注意的地方"><a href="#实现一个系统调用所需要注意的地方" class="headerlink" title="实现一个系统调用所需要注意的地方"></a>实现一个系统调用所需要注意的地方</h4><h5 id="系统调用号"><a href="#系统调用号" class="headerlink" title="系统调用号"></a>系统调用号</h5><p>系统调用号是<strong>唯一</strong>的。</p><p>内核记录了系统调用表中的所有已注册的系统调用的列表，存储在<strong>sys_call_table</strong>中。</p><h5 id="参数校验"><a href="#参数校验" class="headerlink" title="参数校验"></a>参数校验</h5><p>上个问题说明了可以通过异常进入到内核态。那这样不就出现内核不安全了吗？</p><p>所以系统调用的实现必须检验参数的准确性，安全性，是否威胁到内核。</p><p>最重要的一种检查就是检查用户提供的指针是否有效。如果不检查的话，那传一个没有访问权限的指针，就可以访问他访问不到的数据。就会有安全问题。</p><p>因此内核必须保证（或者说系统调用的职责，但是系统调用也属于内核）：</p><ul><li>指针指向的内存区域属于用户空间。进程绝不能哄骗内核去读内核空间的数据。</li><li>指针指向的内存区域在进程的地址空间里。进程绝不能哄骗内核去读其他进程的数据。</li><li>如果是读，该内存应该被标记为可读，如果是写，该内存应该被标记为可写。进程绝不能绕过内存访问限制。</li></ul>]]></content>
    
    
    <categories>
      
      <category>操作系统</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ReadWriteLock</title>
    <link href="/2022/04/19/ReadWriteLock/"/>
    <url>/2022/04/19/ReadWriteLock/</url>
    
    <content type="html"><![CDATA[<h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>AQS是一种抽象同步队列。可以继承AQS实现读写锁。</p><p>本例子，是将int字节的最后两位当作写锁的标志，剩下30位作为读锁的标志。</p><p>其中01为预写锁。</p><p>11为写锁。&#x2F;&#x2F; 二进制编码</p><h3 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h3><figure class="highlight java"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></div></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.concurrent.locks.AbstractQueuedSynchronizer;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ReadWriteLock</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Lock</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractQueuedSynchronizer</span> &#123;<br>        <span class="hljs-comment">// 获取写锁。</span><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">protected</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">tryAcquire</span><span class="hljs-params">(<span class="hljs-type">int</span> arg)</span> &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">oldState</span> <span class="hljs-operator">=</span> getState();<br>            <span class="hljs-type">int</span> <span class="hljs-variable">lockStatus</span> <span class="hljs-operator">=</span> (oldState &amp; <span class="hljs-number">3</span>);<span class="hljs-comment">// 和3进行与运算 其实就是和 11（二进制）进行运算。&amp; 规则：只要有1即为1。</span><br>            <span class="hljs-keyword">switch</span> (lockStatus) &#123;<br>                <span class="hljs-comment">// 当前无写任务尝试获取锁，默认获取预写锁，等待读任务完成后获取写锁。</span><br>                <span class="hljs-keyword">case</span> <span class="hljs-number">0</span>:<br>                    <span class="hljs-type">int</span> <span class="hljs-variable">inc</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>                    <span class="hljs-comment">// 判断是否有读锁</span><br>                    <span class="hljs-keyword">if</span> (oldState == <span class="hljs-number">0</span>) &#123;<br>                        <span class="hljs-comment">// 没有读锁</span><br>                        inc = <span class="hljs-number">3</span>;<br>                    &#125;<br>                    <span class="hljs-comment">// 更新失败，获取锁失败。</span><br>                    <span class="hljs-keyword">if</span> (!compareAndSetState(oldState, (oldState + inc))) &#123;<br>                        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>                    &#125;<br>                    <span class="hljs-keyword">if</span> (inc == <span class="hljs-number">3</span>) &#123;<br>                        setExclusiveOwnerThread(Thread.currentThread());<br>                        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>                    &#125; <span class="hljs-keyword">else</span> &#123;<br>                        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>                    &#125;<br>                    <span class="hljs-comment">// 当前存在预写锁</span><br>                <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>                    <span class="hljs-comment">//  加写锁。并且设置成功</span><br>                    <span class="hljs-keyword">if</span> (oldState == <span class="hljs-number">1</span> &amp;&amp; compareAndSetState(oldState, <span class="hljs-number">3</span>)) &#123;<br>                        setExclusiveOwnerThread(Thread.currentThread());<br>                        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>                    &#125;<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>                <span class="hljs-comment">// 当前写锁被独占 直接返回。</span><br>                <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>                <span class="hljs-keyword">default</span>:<br>                    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalMonitorStateException</span>();<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">// 释放写锁。</span><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">protected</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">tryRelease</span><span class="hljs-params">(<span class="hljs-type">int</span> releases)</span> &#123;<br>            <span class="hljs-comment">// 根据state的值来判断是否获得过写锁。</span><br>            <span class="hljs-keyword">if</span> (getState() != <span class="hljs-number">3</span>)<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalMonitorStateException</span>();<br>            <span class="hljs-comment">// 将独占锁给去掉，释放。</span><br>            setExclusiveOwnerThread(<span class="hljs-literal">null</span>);<br>            <span class="hljs-comment">// 将state的值重新设置为无锁状态</span><br>            setState(<span class="hljs-number">0</span>);<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">protected</span> <span class="hljs-type">int</span> <span class="hljs-title function_">writeCount</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">return</span> getState() &amp; <span class="hljs-number">3</span>;<br>        &#125;<br><br>        <span class="hljs-comment">// 获取读锁数量</span><br>        <span class="hljs-keyword">protected</span> <span class="hljs-type">int</span> <span class="hljs-title function_">readLock</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">return</span> getState() &gt;&gt; <span class="hljs-number">2</span>;<br>        &#125;<br><br>        <span class="hljs-comment">// 获取读锁。</span><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">protected</span> <span class="hljs-type">int</span> <span class="hljs-title function_">tryAcquireShared</span><span class="hljs-params">(<span class="hljs-type">int</span> arg)</span> &#123;<br>            <span class="hljs-comment">// 此时写锁是不存在的，可以加读锁。</span><br>            <span class="hljs-keyword">while</span> (writeCount() == <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-type">int</span> <span class="hljs-variable">oldState</span> <span class="hljs-operator">=</span> getState();<br>                <span class="hljs-comment">// 加4的含义。 4 的二进制为 100. 后两位是用来标记写锁。所以必须要跳过写锁位。</span><br>                <span class="hljs-type">int</span> <span class="hljs-variable">newState</span> <span class="hljs-operator">=</span> oldState + <span class="hljs-number">4</span>;<br>                <span class="hljs-keyword">if</span> (compareAndSetState(oldState, newState)) &#123;<br>                    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>        &#125;<br><br>        <span class="hljs-comment">// 释放读锁。</span><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">protected</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">tryReleaseShared</span><span class="hljs-params">(<span class="hljs-type">int</span> arg)</span> &#123;<br>            <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>                <span class="hljs-type">int</span> <span class="hljs-variable">current</span> <span class="hljs-operator">=</span> getState();<br>                <span class="hljs-keyword">if</span> (current &lt; <span class="hljs-number">4</span>)<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>                <span class="hljs-comment">// 和上面是一样的道理</span><br>                <span class="hljs-type">int</span> <span class="hljs-variable">next</span> <span class="hljs-operator">=</span> current - <span class="hljs-number">4</span>;<br>                <span class="hljs-comment">// 可能释放失败，也就是cas没有成功，所以需要手动多次释放锁。</span><br>                <span class="hljs-keyword">if</span> (compareAndSetState(current, next)) &#123;<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br><br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">Lock</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Lock</span>();<br><br>    <span class="hljs-comment">// 获取读锁</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">readLock</span><span class="hljs-params">()</span> &#123;<br>        lock.acquireShared(<span class="hljs-number">1</span>);<br>    &#125;<br><br>    <span class="hljs-comment">// 获取写锁</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">writeLock</span><span class="hljs-params">()</span> &#123;<br>        lock.acquire(<span class="hljs-number">1</span>);<br>    &#125;<br><br>    <span class="hljs-comment">// 释放读锁。</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">readRelease</span><span class="hljs-params">()</span> &#123;<br>        lock.releaseShared(<span class="hljs-number">1</span>);<br>    &#125;<br><br>    <span class="hljs-comment">// 释放写锁</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">writeRelease</span><span class="hljs-params">()</span> &#123;<br>        lock.release(<span class="hljs-number">1</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id=""><a href="#" class="headerlink" title=""></a></h4>]]></content>
    
    
    <categories>
      
      <category>手撕代码</category>
      
    </categories>
    
    
    <tags>
      
      <tag>复现</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>二分查找</title>
    <link href="/2022/04/19/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/"/>
    <url>/2022/04/19/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/</url>
    
    <content type="html"><![CDATA[<h5 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h5><p>二分查找适用于排好序的，并且时间复杂度为O(logn)。</p><p>条件。 二分查找主要是在一个区间进行查找，有两种情况，</p><ol><li><p>左闭右闭</p><p>在这种情况下， 算出mid值之后，会将原来的区间拆分成两个区间分别是【left，mid】和【mid，right】，但是两边都是闭区间，而且mid在这一轮情况中已经对比过所以正确的区间则是去掉mid。【left，mid-1】和【mid+1，right】</p></li><li><p>左闭右开</p><p>这种情况也是一样的，算出mid之后分成两个区间，【left，mid）和【mid，right）。开区间那边的是不会搜索到的。而mid在这一轮对比过，所以区间就为【left，mid）和【mid+1，right）</p></li></ol><h5 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h5><figure class="highlight java"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">searchInsert</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums, <span class="hljs-type">int</span> target)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">left</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, right = nums.length;<br>        <span class="hljs-keyword">while</span>(left&lt;right)&#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">mid</span> <span class="hljs-operator">=</span> left + (right-left)/<span class="hljs-number">2</span>;<br>            <span class="hljs-keyword">if</span>(target == nums[mid])&#123;<br>                <span class="hljs-keyword">return</span> target；<br>            &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(target &gt; nums[mid])&#123;<br>                left = mid+<span class="hljs-number">1</span>;<br>            &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(target &lt; nums[mid])&#123;<br>                right = mid;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id=""><a href="#" class="headerlink" title=""></a></h4>]]></content>
    
    
    <categories>
      
      <category>手撕代码</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>RPC</title>
    <link href="/2022/04/18/RPC/"/>
    <url>/2022/04/18/RPC/</url>
    
    <content type="html"><![CDATA[<h5 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h5><p>调用远程计算机上的服务，就像调用本地服务一样。RPC可以很好的解耦系统。</p><h5 id="核心流程"><a href="#核心流程" class="headerlink" title="核心流程"></a>核心流程</h5><ol><li>服务消费方（client）调用以本地调用方式调用服务。</li><li>client stub 接收到调用后负责将方法、参数等组装成能够进行网络传输的消息体。</li><li>client stub 找到服务地址，并将消息发送到服务端。</li><li>server stub 收到消息后进行解码。</li><li>server stub 根据解码结果调用本地的服务。</li><li>本地服务执行并将结果返回给server stub。</li><li>server stub 将返回结果打包成消息发送给消费端。</li><li>服务消费放得到最终结果。</li></ol><h5 id="关键技术"><a href="#关键技术" class="headerlink" title="关键技术"></a>关键技术</h5><ol><li><p>java的动态代理</p><p>基于动态代理生成代理对象，当带哦用代理对象的方法时，由代理及逆行相关信息的组装，并发送到服务器进行远程调用，并由代理接收调用结果并返回。</p><ul><li>通过实现InvocationHandler接口创建自己的调用处理器</li><li>通过为Proxy类指定ClassLoader对象和一组interface来创建动态代理类</li><li>通过反射机制获得动态代理类的构造参数，其唯一参数类型就是调用处理器接口类型</li><li>通过构造函数创建动态代理类实例，构造时调用处理器对象作为参数被传入。</li></ul><p>动态代理的核心是反射机制。</p></li><li><p>netty网络通信</p></li><li><p>消息序列化</p><ul><li><p>json 是一种轻量级的数据交换语言。json由于采用字符方式存储，占用相对于字节方式较大，并且序列化后类的信息会丢失，可能导致反序列化失败。</p></li><li><p>kryo 是一种快速高效的java序列化框架，旨在提供快速、高效和易用的API，无论文件、数据库或网络数据kryo都可以随时完成序列化，kryo还可以执行自动深拷贝、浅拷贝，这是对象到对象的直接拷贝，而不是对象-&gt;字节-&gt;对象的拷贝。并且序列化后体积较小。</p></li></ul></li></ol><h5 id="消息协议"><a href="#消息协议" class="headerlink" title="消息协议"></a>消息协议</h5><p>magic number： 标识是一个协议包，4 bytes</p><p>package number：标明是request或者是response的包，4 bytes</p><p>serialize number：标明用哪一种序列化方式，4 bytes</p><p>data length：数据长度，为了解决沾包问题。4 bytes</p><p>data： 传输数据。</p>]]></content>
    
    
    <categories>
      
      <category>框架</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Netty</tag>
      
      <tag>动态代理</tag>
      
      <tag>序列化</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
